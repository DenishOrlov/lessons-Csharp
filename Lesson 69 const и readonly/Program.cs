using System;

namespace Lesson_69_const_и_readonly
{   
    /*
     * Модификаторы const и readonly
     * 
     * Const 
     *       Они нужны чтоб при использовании какого то числа (например 42) в формуле, было понятно откуда взялось (MAX_VALUE = 42)
     *       Вообще нельзя изменять значение после того как туда его записали при обьявлении. Чтоб не сломать логику программы 
     *       Сразу после обьявления должны поместить туда данные.
     *       Используется для заранне известных данных, которые не должны изменяться.
     *       Часто используется для хранения сообщений об ошибках. Например для логгирования
     *       Константы неявно имеют модификатор static
     *       
     * Readonly
     *       Если значение не знаем в момент компиляции, но получив - нельзя изменять
     *       Поведение такое же как и у констант, но только без неявного модификатора static
     *       То ест можем обьявить, но значение присвоить в момент создания обьека классаюНо можем и сразу присвоить
     *       После того как в констукторе класса эти данные поместили, далее мы их изменять не можем
     *       
     */

    class MyClass
    {
        public const int a = 10;                     // Значение считывается в момент компиляции, по этому надо присваивать сразу в обьявлении

        public const double PI = 3.14;               // Констана для мат значения например

        public const string MY_ERROR = "some error"; // Константа в которой сообщение об ошибке. именно такой синтаксим имени переменной. Капсом и через низ подчёрк

        public readonly int _v;                      // Обьявляем readonly поле класса (переменную)

        public static readonly int j;                // Поле readonly с модификатором static. Для него нужен свой конструктор static, чтоб записать значение


        public MyClass(int v)                        // В конструкторе класса в качестве аргумента передаём значение,
        {
            _v = v;                                  // которое запишем в поле readonly и уже не сможем изменить

            //PI = 6;  // Так не скомпилируется
        }

        static MyClass()                            // Создаём конструктор static для поля класса "j". Он вызовется один раз и присвоит значение полю
        {
            j = 5;
        }

        public void Print()                         // Метод отображения
        {
            Console.WriteLine(MY_ERROR);
            Console.WriteLine(a);
            Console.WriteLine(_v);
            Console.WriteLine(j);
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine(MyClass.PI);

            MyClass class1 = new MyClass(3);    // Создаём экземпляр класса с использованием конструктора. Так же отработает и статик конструктор

            class1.Print();
        }
    }
}
