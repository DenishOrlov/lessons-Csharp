using System;

namespace Lesson_64_static_methods
{
    /*
     * Ключевое слово static
     * 
     * Статические методы. Работают так же как и с полями. Можем использовать без создания экземпляра класса
     * 
     *        Static методы НЕ могут взаемодействовать с НЕ статик полями и методами. Потому что вызвать static метод можем и без создания экземпляра класса, и тогда
     *        метод будет ссылаться на несуществующие данные.
     *        В не статическом методе можем использовать статические методы и поля.
     *        
     *        Использование статических методов часто применяется для создания инструменов, помощников (Console.Write, Array.Sort и т.д.) 
     *        чтоб не надо было создавать экземпляр класса 
     *        
     *        В случае использования ключ слова static для методов, мы теряем возможность использовать полиморфизм для ООП, по тому что не сможем вызвать
     *        метод на уровне экземпляра (обьекта) класса
     * 
     * Статические свойства класса
     *         Два метода геттер и сеттер, для работы с полями, чтоб использовали поля по тому назначению, которое мы заложим 
     *         Если добавить static к свойству поля, то к этому свойству можно будет обращаться только через сам класс, например MyClass.Y
     */

    class MyClass
    {
        private static int a;

        private int b;

        public static void Foo()
        {
            Console.WriteLine("Метод Foo");

            a = 3;                          // можем использовать статическое поле, без создания экземпляра класса
            Console.WriteLine(a);
        }
        public void Bar()
        {
            a = 6;
            b = 8;
            Console.WriteLine("Метод Bar");
            Foo();                          // внетри нестатического метода используем статический
        }

        private static int f;               // работа со свойствами static
        public static int F
        {
            get { return f; }
            set { f = value; }
        }

        public static int G {get;set;}      // static автоматические свойства



    }
    class Program
    {
        static void Main(string[] args)
        {
            MyClass.Foo();                   // так метод вызвать можно, через сам класс / то есть на уровне класса, а не экземпляра класса

            MyClass myClass = new MyClass();
            //myClass.Foo();                 // так работать не будет, потому, что метод с ключевым словом статик и на уромне
                                             // экземпляра класса он не доступен
            
            myClass.Bar();                   // так метод вызвать можно, потому что он public и не static, и вызывается из экземпляра класса

            MyClass.F = 13;                  // через свойство F, записываем значение в поле класса f 
            Console.WriteLine(MyClass.F);    // выводим в консоль значение поля F через геттер
        }
    }
}
