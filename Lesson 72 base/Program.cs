using System;

namespace Lesson_72_base
{
    /*
     *  Наследование
     *  
     *  Конструкторы класса и ключевое слово base
     *  
     *         При запуске программы будет конструироваться самый первый класс, от которго наследуется, а потом по очереди дочерние по цепочке.
     *         
     *         Если у одного из базового класса конструктор указан с параметрами, то мы не можем просто наследоваться, 
     *         нам нужно в конструкторе использовать слово : base (тут параметры родительского класса)
     *         
     *         Слово base не ограничено использованием в конструкторах 
     *         base позволяет нам явно указать, что мы хотим использовать "нечто" (метод, свойство, поле и т.д.) из базового класса в классе потомке
     *         
     *         Это как this указывает на текущий класс, так base указывает на родительский класс. base - не обязательно писать каждый раз, 
     *         а только при колизиях в имени базового класса и потомка
     */ 

    class MyClass
    {
        public MyClass()
        {
            Console.WriteLine("Конструктор класса MyCLass");
        }
    }
    class Point2D : MyClass
    {
        public Point2D(int x, int y)                            // Конструктор класса 2Д
        {
            X = x;
            Y = y;

            Console.WriteLine("Вызван конструктор Point2D");
        }
        public int X { get; set; }
        public int Y { get; set; }

        public void Print()                                   // Базовый метод вывода
        {
            Console.WriteLine("X:\t"+X);
            Console.WriteLine("Y:\t"+Y);
        }
    }
    class Point3D : Point2D                                    // Наследуемся от 2D
    {
        public Point3D(int x, int y, int z) :base(x,y)         // Конструктор класса 3Д. Используем в base(x,y) - это аргументы из параметров конструктора (int x, int y, int z)
        {                                                      // Мы их передаём в родительский класс для обработки
            Z = z;
            Console.WriteLine("Вызван конструктор Point3D");
        }
        public int Z { get; set; }                              // Добавляем уникальное свойство класса 3D
        
        public new void Print()                                 // Метод вывода. Имя такое же как у базового класса, по этому используем base и слово new, чтоб явно указать 
        {
            base.Print();                                       // base - позволяет наследовать методы базовых классов, от котрорых унаследован по цепочке
                                                     
            Console.WriteLine("Z:\t" + Z);                      // Добавляем вывод значения Z

        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Point3D point3d = new Point3D(5,6,8);                // У нас вызовется конструктор класса  3Д и всех родительских классов
            point3d.Print3D();
        }
    }
}
